version: 2.1

parameters:
  docker-img:
    type: 'string'
    default: ''

commands:
  timeout:
    parameters:
      duration:
        default: '10m'
        type: 'string'
    steps:
      - run:
          name: Cancel job after <<parameters.duration>>
          background: true
          command: |
            sleep <<parameters.duration>>
            echo "Cancelling job as <<parameters.duration>> has elapsed"
            curl --fail -X POST -H "Circle-Token: ${CIRCLE_TOKEN}" "https://circleci.com/api/v1.1/project/github/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BUILD_NUM}/cancel"
  install-sdk:
    parameters:
      sdk:
        type: 'string'
      version:
        type: 'string'
    steps:
      - restore_cache:
          key: sdk-{{ .Environment.CIRCLE_JOB }}-{{ arch }}-<<parameters.sdk>>-<<parameters.version>>
      - run:
          name: Install SDK
          command: |
            curl -s "https://get.sdkman.io" | bash
            source "$HOME/.sdkman/bin/sdkman-init.sh"
            sdk version
            sdk install <<parameters.sdk>> <<parameters.version>>
            sdk default <<parameters.sdk>> <<parameters.version>>
            sdk use <<parameters.sdk>> <<parameters.version>>
            echo '### SDKMAN ###' >> "$BASH_ENV"
            echo 'export SDKMAN_DIR="$HOME/.sdkman"' >> "$BASH_ENV"
            echo '[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"' >> "$BASH_ENV"
            source "$BASH_ENV"
      - save_cache:
          key: sdk-{{ .Environment.CIRCLE_JOB }}-{{ arch }}-<<parameters.sdk>>-<<parameters.version>>
          paths:
            - ~/.sdkman
  start-db:
    parameters:
      docker-img:
        type: 'string'
        default: <<pipeline.parameters.docker-img>>
      topology:
        type: 'string'
        default: 'single'
      ssl:
        type: 'string'
        default: 'false'
      compression:
        type: 'string'
        default: 'false'
    steps:
      - run:
          name: Start Database
          command: ./docker/start_db.sh
          environment:
            DOCKER_IMAGE: <<parameters.docker-img>>
            STARTER_MODE: <<parameters.topology>>
            STARTER_DOCKER_IMAGE: 'docker.io/arangodb/arangodb-starter:0.18.5'
            SSL: <<parameters.ssl>>
            COMPRESSION: <<parameters.compression>>
  install:
    steps:
      - run:
          name: mvn install
          command: mvn install -Dmaven.test.skip -Dgpg.skip -Dmaven.javadoc.skip
  report:
    parameters:
      working_directory:
        type: 'string'
        default: '.'
    steps:
      - run:
          name: Create reports
          command: mvn surefire-report:failsafe-report-only
          working_directory: <<parameters.working_directory>>
      - store_artifacts:
          path: <<parameters.working_directory>>/target/site
  load_cache:
    steps:
      - run:
          name: Generate Cache Checksum
          command: find . -name 'pom.xml' | sort | xargs cat > /tmp/maven_cache_seed
      - restore_cache:
          key: maven-{{ .Environment.CIRCLE_JOB }}-{{ checksum "/tmp/maven_cache_seed" }}
  store_cache:
    steps:
      - save_cache:
          key: maven-{{ .Environment.CIRCLE_JOB }}-{{ checksum "/tmp/maven_cache_seed" }}
          paths:
            - ~/.m2/repository
  config_gpg:
    steps:
      - run:
          name: Configure GPG
          command: echo $GPG_PRIVATE_KEY | base64 --decode | gpg --batch --no-tty --import --yes
  deploy:
    steps:
      - run:
          name: Deploy to Apache Maven Central
          command: mvn -s .circleci/maven-release-settings.xml -Dmaven.test.skip deploy
  release:
    steps:
      - run:
          name: Release to Apache Maven Central
          command: mvn -s .circleci/maven-release-settings.xml -Dmaven.test.skip nexus-staging:release
          environment:
            MAVEN_OPTS: "--add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.lang.reflect=ALL-UNNAMED --add-opens=java.base/java.text=ALL-UNNAMED --add-opens=java.desktop/java.awt.font=ALL-UNNAMED"

executors:
  j11:
    docker:
      - image: 'cimg/openjdk:11.0'
  j17:
    docker:
      - image: 'cimg/openjdk:17.0'
  j21:
    docker:
      - image: 'cimg/openjdk:21.0'

jobs:

  test:
    parameters:
      docker-img:
        type: 'string'
        default: <<pipeline.parameters.docker-img>>
      topology:
        type: 'string'
        default: 'single'
      jdk:
        type: 'string'
        default: 'j21'
      args:
        type: 'string'
        default: ''
      ssl:
        type: 'string'
        default: 'false'
      native:
        type: 'string'
        default: 'false'
      graalvm-version:
        type: 'string'
        default: '21.0.2-graalce'
      resource_class:
        type: 'string'
        default: 'medium'
    executor: <<parameters.jdk>>
    resource_class: <<parameters.resource_class>>
    steps:
      - timeout
      - checkout
      - setup_remote_docker
      - when:
          condition:
            equal: [ 'true', <<parameters.native>> ]
          steps:
            - install-sdk:
                sdk: 'java'
                version: <<parameters.graalvm-version>>
      - start-db:
          docker-img: <<parameters.docker-img>>
          topology: <<parameters.topology>>
          ssl: <<parameters.ssl>>
      - load_cache
      - run:
          name: mvn dependency:tree
          command: |
            mvn dependency:tree -am -pl test-functional \
              -Dssl=<<parameters.ssl>> \
              -Dnative=<<parameters.native>> \
              <<parameters.args>>
      - run:
          name: Test
          command: |
            mvn verify -am -pl test-functional -Dgpg.skip -Dmaven.javadoc.skip \
              -Dssl=<<parameters.ssl>> \
              -Dnative=<<parameters.native>> \
              <<parameters.args>>
      - report:
          working_directory: test-functional
      - store_cache

  # DE-847
  # https://issues.apache.org/jira/browse/MSHADE-206
  # https://issues.apache.org/jira/browse/MNG-5899
  test-shaded:
    parameters:
      docker-img:
        type: 'string'
        default: <<pipeline.parameters.docker-img>>
      topology:
        type: 'string'
        default: 'single'
      jdk:
        type: 'string'
        default: 'j21'
      args:
        type: 'string'
        default: ''
      ssl:
        type: 'string'
        default: 'false'
      native:
        type: 'string'
        default: 'false'
      graalvm-version:
        type: 'string'
        default: '21.0.2-graalce'
      resource_class:
        type: 'string'
        default: 'medium'
    executor: <<parameters.jdk>>
    resource_class: <<parameters.resource_class>>
    steps:
      - timeout
      - checkout
      - setup_remote_docker
      - when:
          condition:
            equal: [ 'true', <<parameters.native>> ]
          steps:
            - install-sdk:
                sdk: 'java'
                version: <<parameters.graalvm-version>>
      - start-db:
          docker-img: <<parameters.docker-img>>
          topology: <<parameters.topology>>
          ssl: <<parameters.ssl>>
      - load_cache
      - install
      - run:
          name: mvn dependency:tree
          working_directory: test-functional
          command: |
            mvn dependency:tree \
              -Dshaded \
              -Dssl=<<parameters.ssl>> \
              -Dnative=<<parameters.native>> \
              <<parameters.args>>
      - run:
          name: Test
          working_directory: test-functional
          command: |
            mvn verify -Dgpg.skip \
              -Dshaded \
              -Dssl=<<parameters.ssl>> \
              -Dnative=<<parameters.native>> \
              <<parameters.args>>
      - report:
          working_directory: test-functional
      - store_cache

  test-non-func:
    executor: 'j21'
    steps:
      - timeout
      - checkout
      - setup_remote_docker
      - install-sdk:
          sdk: 'java'
          version: '21.0.2-graalce'
      - start-db
      - load_cache
      - run:
          name: mvn dependency:tree
          command: mvn dependency:tree -am -pl test-non-functional
      - run:
          name: Test
          command: mvn verify -am -pl test-non-functional -Dgpg.skip -Dmaven.javadoc.skip
      - store_cache

  # DE-847
  # https://issues.apache.org/jira/browse/MSHADE-206
  # https://issues.apache.org/jira/browse/MNG-5899
  test-non-func-shaded:
    executor: 'j21'
    steps:
      - timeout
      - checkout
      - setup_remote_docker
      - install-sdk:
          sdk: 'java'
          version: '21.0.2-graalce'
      - start-db
      - load_cache
      - install
      - run:
          name: mvn dependency:tree
          working_directory: test-non-functional
          command: mvn dependency:tree -Dshaded
      - run:
          name: Test
          working_directory: test-non-functional
          command: mvn verify -Dgpg.skip -Dmaven.javadoc.skip -Dshaded
      - store_cache

  sonar:
    executor: 'j21'
    resource_class: 'large'
    steps:
      - timeout
      - checkout
      - setup_remote_docker
      - start-db
      - load_cache
      - restore_cache:
          name: Restore Sonar cache
          key: sonar-{{ .Environment.CIRCLE_JOB }}-{{ checksum "/tmp/maven_cache_seed" }}
      - run:
          name: Test
          command: mvn verify -am -pl test-functional -Pstatic-code-analysis -Dgpg.skip -Dmaven.javadoc.skip
      - run:
          name: Analyze
          command: mvn verify -Pstatic-code-analysis -Dmaven.test.skip -Dgpg.skip -Dmaven.javadoc.skip org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=arangodb_arangodb-java-driver
      - save_cache:
          name: Save Sonar cache
          key: sonar-{{ .Environment.CIRCLE_JOB }}-{{ checksum "/tmp/maven_cache_seed" }}
          paths:
            - ~/.sonar/cache
      - store_cache

  tutorial:
    executor: 'j21'
    steps:
      - timeout
      - checkout
      - setup_remote_docker
      - start-db
      - load_cache
      - run:
          name: mvn install
          command: mvn install -Dmaven.test.skip -Dgpg.skip -am -pl driver
      - run:
          name: Run Maven
          command: mvn compile exec:java -Dexec.mainClass=FirstProject
          working_directory: tutorial/maven
      - run:
          name: Run Gradle
          command: gradle run
          working_directory: tutorial/gradle
      - store_cache

  resilience-test:
    executor: 'j21'
    resource_class: 'large'
    steps:
      - timeout
      - checkout
      - setup_remote_docker
      - start-db:
          topology: 'cluster'
          compression: 'true'
      - load_cache
      - run:
          name: Start Toxiproxy
          command: ./bin/startProxy.sh
          working_directory: test-resilience
          background: true
          environment:
            TOXIPROXY_VERSION: v2.9.0
      - run:
          name: mvn dependency:tree
          command: mvn dependency:tree -am -pl test-resilience
      - run:
          name: Test
          command: mvn verify -am -pl test-resilience -Dgpg.skip -Dmaven.javadoc.skip
      - store_cache

  # DE-847
  # https://issues.apache.org/jira/browse/MSHADE-206
  # https://issues.apache.org/jira/browse/MNG-5899
  resilience-test-shaded:
    executor: 'j21'
    resource_class: 'large'
    steps:
      - timeout
      - checkout
      - setup_remote_docker
      - start-db:
          topology: 'cluster'
          compression: 'true'
      - load_cache
      - install
      - run:
          name: Start Toxiproxy
          command: ./bin/startProxy.sh
          working_directory: test-resilience
          background: true
          environment:
            TOXIPROXY_VERSION: v2.9.0
      - run:
          name: mvn dependency:tree
          working_directory: test-resilience
          command: mvn dependency:tree -Dshaded
      - run:
          name: Test
          working_directory: test-resilience
          command: mvn verify -Dgpg.skip -Dmaven.javadoc.skip -Dshaded
      - store_cache

  deploy:
    executor: 'j11'
    steps:
      - timeout:
          duration: '30m'
      - checkout
      - load_cache
      - config_gpg
      - deploy
      - store_cache

  release:
    executor: 'j11'
    steps:
      - timeout:
          duration: '30m'
      - checkout
      - load_cache
      - config_gpg
      - deploy
      - release
      - store_cache

workflows:
  test-adb-version:
    when:
      not: <<pipeline.parameters.docker-img>>
    jobs:
      - test:
          name: test-single-<<matrix.docker-img>>
          matrix:
            parameters:
              docker-img:
                - 'docker.io/arangodb/arangodb:3.11'
                - 'docker.io/arangodb/arangodb:3.12'
                - 'docker.io/arangodb/enterprise:3.11'
                - 'docker.io/arangodb/enterprise:3.12'
              topology:
                - 'single'
              args:
                - '-DenableSlowTests=true'
      - test:
          name: test-cluster-<<matrix.docker-img>>
          matrix:
            parameters:
              docker-img:
                - 'docker.io/arangodb/arangodb:3.11'
                - 'docker.io/arangodb/arangodb:3.12'
                - 'docker.io/arangodb/enterprise:3.11'
                - 'docker.io/arangodb/enterprise:3.12'
              topology:
                - 'cluster'
              args:
                - '-DenableSlowTests=true'

  test-adb-topology:
    when: <<pipeline.parameters.docker-img>>
    jobs:
      - test:
          name: test-<<matrix.topology>>
          matrix:
            parameters:
              topology:
                - 'single'
                - 'cluster'
              args:
                - '-DenableSlowTests=true'

  test-func:
    when:
      not: <<pipeline.parameters.docker-img>>
    jobs:
      - test:
          name: test-ssl=<<matrix.ssl>>
          matrix:
            parameters:
              ssl:
                - 'true'
                - 'false'
      - test-shaded:
          name: test-shaded-ssl=<<matrix.ssl>>
          matrix:
            parameters:
              ssl:
                - 'true'
                - 'false'
      - test:
          name: test-jdk=<<matrix.jdk>>
          matrix:
            parameters:
              jdk:
                - 'j11'
                - 'j17'
                - 'j21'
          filters:
            tags:
              only: /^v.*/
            branches:
              only:
                - main
      - test:
          name: test-jackson-<<matrix.args>>
          matrix:
            parameters:
              args:
                - '-Dadb.jackson.version=2.17.1'
                - '-Dadb.jackson.version=2.16.2'
                - '-Dadb.jackson.version=2.15.4'
                - '-Dadb.jackson.version=2.14.3'
                - '-Dadb.jackson.version=2.13.5'
                - '-Dadb.jackson.version=2.12.7'
                - '-Dadb.jackson.version=2.11.4'
                - '-Dadb.jackson.version=2.10.5'
          filters:
            tags:
              only: /^v.*/
            branches:
              only:
                - main
      - test:
          name: test-native-ssl=<<matrix.ssl>>
          matrix:
            parameters:
              native:
                - 'true'
              resource_class:
                - '2xlarge'
              ssl:
                - 'true'
                - 'false'
              graalvm-version:
                - '22.0.1-graalce'
                - '21.0.2-graalce'
          filters:
            tags:
              only: /^v.*/
            branches:
              only:
                - main
      - test-shaded:
          name: test-native-shaded-ssl=<<matrix.ssl>>
          matrix:
            parameters:
              native:
                - 'true'
              resource_class:
                - '2xlarge'
              ssl:
                - 'true'
                - 'false'
              graalvm-version:
                - '22.0.1-graalce'
                - '21.0.2-graalce'
          filters:
            tags:
              only: /^v.*/
            branches:
              only:
                - main
      - test:
          name: test-activefailover-<<matrix.docker-img>>
          matrix:
            parameters:
              docker-img:
                - 'docker.io/arangodb/arangodb:3.11'
                - 'docker.io/arangodb/enterprise:3.11'
              topology:
                - 'activefailover'
          filters:
            tags:
              only: /^v.*/
            branches:
              only:
                - main

  test-non-func:
    jobs:
      - test-non-func:
          name: test-non-func
      - test-non-func-shaded:
          name: test-non-func-shaded

  sonar:
    when:
      not: <<pipeline.parameters.docker-img>>
    jobs:
      - sonar:
          name: sonar

  tutorial:
    when:
      not: <<pipeline.parameters.docker-img>>
    jobs:
      - tutorial

  resilience-test:
    jobs:
      - resilience-test:
          name: resilience-test
      - resilience-test-shaded:
          name: resilience-test-shaded

  deploy:
    jobs:
      - deploy:
          context: java-release
          filters:
            tags:
              only: /^deploy.*/
            branches:
              ignore: /.*/

  release:
    jobs:
      - release:
          context: java-release
          filters:
            tags:
              only: /^release.*/
            branches:
              ignore: /.*/
